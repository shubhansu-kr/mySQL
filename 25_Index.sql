-- Indexing 
-- No need to create index on primary key, because that is already indexed 

CREATE INDEX STUDENT ON STUDENT(ST_NAME);

-- DROP INDEX INDEXNAME;
DROP INDEX STUDENT;

-- wE DO NOT NEED TO APPLY INDEX IN SEARCHING THE ITEM, EVERYTHING WORKS 
-- ON THE BACKEND AUTOMATICALLY. 

-- SYNONYM: aLIAS IS ONLY WHILE DISPLAYING, WHILE SYNONYM EXIST THROUGHOUT

-- CREATE SYNONYM S_NAME FOR T_NAME;
CREATE SYNONYM STUD FOR STUDENT;

-- DROP SYNONYM S_NAME;
DROP SYNONYM STUD;

-- sql FUNCTIONS 

-- 1. SCALAR FUNCTION(ROW FUNCTION)
-- 2. AGGREGATE FUNCTION (gROUP FUNCTION)

-- SCALAR FUNCTION 
-- 1. NUMERIC 2. CHARACTER 3. DATE 4. CONVERSION 

-- 1. ABS 
SELECT ABS(-23) FROM DUAL;
SELECT ABS(-23) AS ALIASNAME FROM DUAL;

-- 2. POWER 
-- SELECT POWER(A, N) FROM DUAL; A TO POWER N 
SELECT POWER(2, 32) FROM DUAL;

-- 3. ROUND 
-- SELECT ROUND (A, B) FROM DUAL; ROUND A UP TO B 
SELECT ROUND(10.335, 2) FROM DUAL ;

-- 4. SQRT 
SELECT SQRT(16) FROM DUAL; 
SELECT ROUND(SQRT(1643), 2) FROM DUAL; 

-- 5. EXP
-- SELECT EXP(N) FROM DUAL; E RAISE TO POWER N
SELECT EXP(5) FROM DUAL;

-- 6. GREATEST 
-- SELECT GREATEST(N1, N2, N3) FROM DUAL; fIND THE MAX OF THREE NUM
SELECT GREATEST(43, 54, 23) FROM DUAL;

-- 7. LEAST 
-- SELECT LEAST(N1, N2, N3) FROM DUAL;
SELECT LEAST(32, 453, 2) FROM DUAL;

-- 8. MOD 
-- SELECT MOD(N1, N2) FROM DUAL; N1 % N2;
SELECT MOD(5, 3) FROM DUAL;

-- 9. TRUNC 
-- SELECT TRUNC(N1, N2) FROM DUAL; TRUNCATE N1 BY N2 FROM RIGHT;
SELECT TRUNC(12.322, 2) FROM DUAL;